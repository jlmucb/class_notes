// GPS
// Manferdelli

#include <SoftwareSerial.h>
#include <Adafruit_GPS.h>

#ifndef byte
typedef uint8_t byte;
#endif

const int gprReceivePin= 3;
const int gpsTransmitPin= 5;
const int messageDelay= 1000;

// Note: GPS transmit pin is SoftwareSerial receive pin
//   and vice-versa
SoftwareSerial serialGPS = SoftwareSerial(gpsTransmitPin, gprReceivePin);
Adafruit_GPS GPS(&serialGPS);

void setup() {
  Serial.begin(9600);
  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
  GPS.sendCommand(PGCMD_ANTENNA);
}

void printTwoDigitInt(int x) {
  if (x < 10)
    Serial.print("0");
  Serial.print(x);
}

void printTwoDigitDouble(double x) {
  if (x < 10.0)
    Serial.print("0");
  Serial.print(x);
}

struct gpm_msg_values {
  int hour_;
  int min_;
  double seconds_;
  double degrees_lat_;
  double degrees_long_;
  int num_sats_;
};

// s: string to match
// t: message string
char* strmatch(const char* s, char* t) {
  for (;;) {
    if (*s == 0 || *t == 0)
      return NULL;
    if (*s != *t)
      return NULL;
    s++; t++;
    if (*s == 0)
      return t;
  }
}

// NMEA message format
//  $GNGGA,HHMMSS.SSS,DDMM.MMMM,N/S,DDDMM.MMMM,E/W,n,NS...A*20
bool parseNMEAMessage(char* msg, struct gpm_msg_values* v) {
  Serial.print("Debug print, NMEA message: ");
  Serial.println(msg);

  char* time_string = strmatch("$GNGGA,", msg);
  if (time_string == NULL)
    return false;
  sscanf(time_string, "%02d%02d", &v->hour_, &v->min_);
  sscanf(time_string+4, "%f", &v->seconds_);

  char* latitude_string = strmatch(",", time_string);
  if (latitude_string == NULL)
    return false;
  int deglat;
  double minlat;
  sscanf(latitude_string, "%02d%7.4f", &deglat, &minlat);
  v->degrees_lat_ = ((double)deglat) + (((double)minlat) / 60.0);
  latitude_string += 9;
  if (*latitude_string != ',')
    return false;
  if (*(++latitude_string) == 'S')
    v->degrees_lat_ *= -1.0;
  char* longitude_string = latitude_string + 1;
  int deglong;
  double minlong;
  sscanf(longitude_string, "%03d%7.4f", &deglong, &minlong);
  v->degrees_long_ = ((double)deglong) + (((double)minlong) / 60.0);
  longitude_string+= 10;
  if (*longitude_string != ',')
    return false;
  longitude_string++;
  if (*(++longitude_string) == 'W')
    v->degrees_long_ *= -1.0;

  return true;
}

void loop() {
  gpm_msg_values out;

  Serial.println("");
  char c= GPS.read();     // causes the message to be read
  if (GPS.newNMEAreceived()) {
    if (parseNMEAMessage(GPS.lastNMEA(), &out)) {
      Serial.print("Time: ");
      printTwoDigitInt(out.hour_);
      Serial.print(":");
      printTwoDigitInt(out.min_);
      Serial.print(":");
      printTwoDigitDouble(out.seconds_);
      Serial.print(" GMT,  ");
      Serial.print("Position: ");
      Serial.print(out.degrees_lat_);
      Serial.print(" degrees latitude, ");
      Serial.print(out.degrees_long_);
      Serial.print(" degrees longitude");
      Serial.println();
    } else {
      Serial.println("Can't parse NMEA message");
    }
  } 
  delay(messageDelay);
}
