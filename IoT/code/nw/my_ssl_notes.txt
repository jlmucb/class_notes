useful for later
EM = 0x00 || 0x02 || PS || 0x00 || M to fill buffer

ASN1_INTEGER* a = ASN1_INTEGER_new();
ASN1_INTEGER_set_uint64(a, sn);
X509_set_serialNumber(x509, a);
X509_NAME* subject_name =  X509_NAME_new();
X509_NAME_add_entry_by_txt(subject_name, "CN", MBSTRING_ASC,
(unsigned char *)"string", -1, -1, 0);
X509_set_subject_name(x509, subject_name);
ASN1_TIME_set(tm_start, t_start)
ASN1_TIME* tm_end = ASN1_TIME_adj(NULL, t_start, offset_day, offset_sec);
X509_set1_notBefore(x509, tm_start);
X509_set1_notAfter(x509, tm_end);
X509_sign(x509, signing_pkey, EVP_sha256());
ASN1_INTEGER_free(a);
EVP_PKEY* subject_pkey = EVP_PKEY_new();
EVP_PKEY_set1_RSA(subject_pkey, subject_rsa_key);
X509_NAME* subject_name =  X509_NAME_new();
X509_NAME_add_entry_by_txt(subject_name, "CN", MBSTRING_ASC,
(unsigned char *)subject_name_str.c_str(), -1, -1, 0);
X509_set_subject_name(x509, subject_name);
X509_NAME* issuer_name =  X509_NAME_new();
X509_NAME_add_entry_by_txt(issuer_name, "CN", MBSTRING_ASC,
                            (unsigned char *)issuer_name_str.c_str(), -1, -1, 0);
X509_set_issuer_name(x509, issuer_name);
time_t t_start = time(NULL);
ASN1_TIME* tm_start= ASN1_TIME_new();
ASN1_TIME_set(tm_start, t_start);
int offset_day = (int) (secs_duration / 86400.0);
long offset_sec = ((long)secs_duration) - ((long)offset_day * 86400);
ASN1_TIME* tm_end = ASN1_TIME_adj(NULL, t_start, offset_day, offset_sec);
X509_set1_notBefore(x509, tm_start);
X509_set1_notAfter(x509, tm_end);
X509_sign(x509, signing_pkey, EVP_sha256());
X509_NAME_get_text_by_NID(subject_name, NID_commonName, name_buf, 1024)
X509_NAME* subject_name = X509_get_subject_name(&cert);
EVP_PKEY* subject_pkey = X509_get_pubkey(&cert);
RSA* subject_rsa_key= EVP_PKEY_get1_RSA(subject_pkey);
int BN_bn2bin(const BIGNUM *a, unsigned char *to);
void BN_zero(BIGNUM *a);
int BN_one(BIGNUM *a);
const BIGNUM *BN_value_one(void);
int BN_set_word(BIGNUM *a, BN_ULONG w);
BN_ULONG BN_get_word(BIGNUM *a);
