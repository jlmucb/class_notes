// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keys.proto

#include "keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_ecc_curve_message_keys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_crypto_ecc_key_message_keys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_crypto_key_message_keys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_point_message_keys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_rsa_key_message_keys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_keys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_symmetric_key_message_keys_2eproto;
class crypto_symmetric_key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_symmetric_key_message> _instance;
} _crypto_symmetric_key_message_default_instance_;
class crypto_rsa_key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_rsa_key_message> _instance;
} _crypto_rsa_key_message_default_instance_;
class crypto_ecc_curve_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_ecc_curve_message> _instance;
} _crypto_ecc_curve_message_default_instance_;
class crypto_point_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_point_message> _instance;
} _crypto_point_message_default_instance_;
class crypto_ecc_key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_ecc_key_message> _instance;
} _crypto_ecc_key_message_default_instance_;
class crypto_key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_key_message> _instance;
} _crypto_key_message_default_instance_;
class crypto_encryption_algorithm_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_encryption_algorithm_message> _instance;
} _crypto_encryption_algorithm_message_default_instance_;
class crypto_key_store_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_key_store_message> _instance;
} _crypto_key_store_message_default_instance_;
class crypto_signatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_signature> _instance;
} _crypto_signature_default_instance_;
static void InitDefaultsscc_info_crypto_ecc_curve_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_ecc_curve_message_default_instance_;
    new (ptr) ::crypto_ecc_curve_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_ecc_curve_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_ecc_curve_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_crypto_ecc_curve_message_keys_2eproto}, {}};

static void InitDefaultsscc_info_crypto_ecc_key_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_ecc_key_message_default_instance_;
    new (ptr) ::crypto_ecc_key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_ecc_key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_crypto_ecc_key_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_crypto_ecc_key_message_keys_2eproto}, {
      &scc_info_crypto_ecc_curve_message_keys_2eproto.base,
      &scc_info_crypto_point_message_keys_2eproto.base,}};

static void InitDefaultsscc_info_crypto_encryption_algorithm_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_encryption_algorithm_message_default_instance_;
    new (ptr) ::crypto_encryption_algorithm_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_encryption_algorithm_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_crypto_encryption_algorithm_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_crypto_encryption_algorithm_message_keys_2eproto}, {
      &scc_info_crypto_symmetric_key_message_keys_2eproto.base,}};

static void InitDefaultsscc_info_crypto_key_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_key_message_default_instance_;
    new (ptr) ::crypto_key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_crypto_key_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_crypto_key_message_keys_2eproto}, {
      &scc_info_crypto_symmetric_key_message_keys_2eproto.base,
      &scc_info_crypto_rsa_key_message_keys_2eproto.base,
      &scc_info_crypto_ecc_key_message_keys_2eproto.base,}};

static void InitDefaultsscc_info_crypto_key_store_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_key_store_message_default_instance_;
    new (ptr) ::crypto_key_store_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_key_store_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_crypto_key_store_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_crypto_key_store_message_keys_2eproto}, {
      &scc_info_crypto_key_message_keys_2eproto.base,}};

static void InitDefaultsscc_info_crypto_point_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_point_message_default_instance_;
    new (ptr) ::crypto_point_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_point_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_point_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_crypto_point_message_keys_2eproto}, {}};

static void InitDefaultsscc_info_crypto_rsa_key_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_rsa_key_message_default_instance_;
    new (ptr) ::crypto_rsa_key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_rsa_key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_rsa_key_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_crypto_rsa_key_message_keys_2eproto}, {}};

static void InitDefaultsscc_info_crypto_signature_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_signature_default_instance_;
    new (ptr) ::crypto_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_signature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_signature_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_crypto_signature_keys_2eproto}, {}};

static void InitDefaultsscc_info_crypto_symmetric_key_message_keys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_symmetric_key_message_default_instance_;
    new (ptr) ::crypto_symmetric_key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_symmetric_key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_symmetric_key_message_keys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_crypto_symmetric_key_message_keys_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_keys_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_keys_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_keys_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_keys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::crypto_symmetric_key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_symmetric_key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_symmetric_key_message, key_type_),
  PROTOBUF_FIELD_OFFSET(::crypto_symmetric_key_message, key_bit_size_),
  PROTOBUF_FIELD_OFFSET(::crypto_symmetric_key_message, value_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, key_type_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, key_bit_size_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, modulus_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, public_exponent_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, private_exponent_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, p_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, q_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, dp_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, dq_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, m_prime_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, p_prime_),
  PROTOBUF_FIELD_OFFSET(::crypto_rsa_key_message, q_prime_),
  0,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, bit_modulus_size_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, p_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, a_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_curve_message, b_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::crypto_point_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_point_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_point_message, valid_),
  PROTOBUF_FIELD_OFFSET(::crypto_point_message, x_),
  PROTOBUF_FIELD_OFFSET(::crypto_point_message, y_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, key_type_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, curve_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, base_point_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, generator_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, private_nonce_),
  PROTOBUF_FIELD_OFFSET(::crypto_ecc_key_message, order_),
  0,
  3,
  4,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, key_type_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, key_name_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, key_usage_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, key_owner_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, not_before_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, not_after_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, symkey_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, rsakey_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, ecckey_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_message, crypto_context_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  6,
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, encryption_algorithm_name_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, message_id_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, key_msg_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, encryption_algorithm_hmac_key_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, encryption_algorithm_iv_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, encryption_algorithm_mode_),
  PROTOBUF_FIELD_OFFSET(::crypto_encryption_algorithm_message, encryption_algorithm_pad_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::crypto_key_store_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_key_store_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_key_store_message, key_entry_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::crypto_signature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_signature, encryption_algorithm_name_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, serialized_statement_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, signature_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, signer_name_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::crypto_symmetric_key_message)},
  { 11, 28, sizeof(::crypto_rsa_key_message)},
  { 40, 49, sizeof(::crypto_ecc_curve_message)},
  { 53, 61, sizeof(::crypto_point_message)},
  { 64, 75, sizeof(::crypto_ecc_key_message)},
  { 81, 96, sizeof(::crypto_key_message)},
  { 106, 118, sizeof(::crypto_encryption_algorithm_message)},
  { 125, 131, sizeof(::crypto_key_store_message)},
  { 132, 141, sizeof(::crypto_signature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_symmetric_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_rsa_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_ecc_curve_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_point_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_ecc_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_encryption_algorithm_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_key_store_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_signature_default_instance_),
};

const char descriptor_table_protodef_keys_2eproto[] =
  "\n\nkeys.proto\"U\n\034crypto_symmetric_key_mes"
  "sage\022\020\n\010key_type\030\001 \002(\t\022\024\n\014key_bit_size\030\002"
  " \001(\005\022\r\n\005value\030\003 \001(\t\"\345\001\n\026crypto_rsa_key_m"
  "essage\022\020\n\010key_type\030\001 \002(\t\022\024\n\014key_bit_size"
  "\030\002 \001(\005\022\017\n\007modulus\030\003 \001(\t\022\027\n\017public_expone"
  "nt\030\004 \001(\t\022\030\n\020private_exponent\030\005 \001(\t\022\t\n\001p\030"
  "\006 \001(\t\022\t\n\001q\030\007 \001(\t\022\n\n\002dp\030\010 \001(\t\022\n\n\002dq\030\t \001(\t"
  "\022\017\n\007m_prime\030\n \001(\t\022\017\n\007p_prime\030\013 \001(\t\022\017\n\007q_"
  "prime\030\014 \001(\t\"U\n\030crypto_ecc_curve_message\022"
  "\030\n\020bit_modulus_size\030\001 \002(\005\022\t\n\001p\030\002 \001(\t\022\t\n\001"
  "a\030\003 \001(\t\022\t\n\001b\030\004 \001(\t\";\n\024crypto_point_messa"
  "ge\022\r\n\005valid\030\001 \002(\005\022\t\n\001x\030\002 \001(\t\022\t\n\001y\030\003 \001(\t\""
  "\317\001\n\026crypto_ecc_key_message\022\020\n\010key_type\030\001"
  " \002(\t\022(\n\005curve\030\002 \001(\0132\031.crypto_ecc_curve_m"
  "essage\022)\n\nbase_point\030\003 \001(\0132\025.crypto_poin"
  "t_message\022(\n\tgenerator\030\004 \001(\0132\025.crypto_po"
  "int_message\022\025\n\rprivate_nonce\030\005 \001(\t\022\r\n\005or"
  "der\030\006 \001(\t\"\236\002\n\022crypto_key_message\022\020\n\010key_"
  "type\030\001 \002(\t\022\020\n\010key_name\030\002 \001(\t\022\021\n\tkey_usag"
  "e\030\003 \001(\t\022\021\n\tkey_owner\030\004 \001(\t\022\022\n\nnot_before"
  "\030\005 \001(\t\022\021\n\tnot_after\030\006 \001(\t\022-\n\006symkey\030\007 \001("
  "\0132\035.crypto_symmetric_key_message\022\'\n\006rsak"
  "ey\030\010 \001(\0132\027.crypto_rsa_key_message\022\'\n\006ecc"
  "key\030\t \001(\0132\027.crypto_ecc_key_message\022\026\n\016cr"
  "ypto_context\030\n \001(\t\"\231\002\n#crypto_encryption"
  "_algorithm_message\022!\n\031encryption_algorit"
  "hm_name\030\001 \002(\t\022\022\n\nmessage_id\030\002 \001(\t\022.\n\007key"
  "_msg\030\003 \001(\0132\035.crypto_symmetric_key_messag"
  "e\022%\n\035encryption_algorithm_hmac_key\030\004 \001(\t"
  "\022\037\n\027encryption_algorithm_iv\030\005 \001(\t\022!\n\031enc"
  "ryption_algorithm_mode\030\006 \001(\t\022 \n\030encrypti"
  "on_algorithm_pad\030\007 \001(\t\"B\n\030crypto_key_sto"
  "re_message\022&\n\tkey_entry\030\001 \003(\0132\023.crypto_k"
  "ey_message\"{\n\020crypto_signature\022!\n\031encryp"
  "tion_algorithm_name\030\001 \002(\t\022\034\n\024serialized_"
  "statement\030\002 \002(\t\022\021\n\tsignature\030\003 \001(\t\022\023\n\013si"
  "gner_name\030\004 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_keys_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_keys_2eproto_sccs[9] = {
  &scc_info_crypto_ecc_curve_message_keys_2eproto.base,
  &scc_info_crypto_ecc_key_message_keys_2eproto.base,
  &scc_info_crypto_encryption_algorithm_message_keys_2eproto.base,
  &scc_info_crypto_key_message_keys_2eproto.base,
  &scc_info_crypto_key_store_message_keys_2eproto.base,
  &scc_info_crypto_point_message_keys_2eproto.base,
  &scc_info_crypto_rsa_key_message_keys_2eproto.base,
  &scc_info_crypto_signature_keys_2eproto.base,
  &scc_info_crypto_symmetric_key_message_keys_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_keys_2eproto_once;
static bool descriptor_table_keys_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keys_2eproto = {
  &descriptor_table_keys_2eproto_initialized, descriptor_table_protodef_keys_2eproto, "keys.proto", 1455,
  &descriptor_table_keys_2eproto_once, descriptor_table_keys_2eproto_sccs, descriptor_table_keys_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_keys_2eproto::offsets,
  file_level_metadata_keys_2eproto, 9, file_level_enum_descriptors_keys_2eproto, file_level_service_descriptors_keys_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_keys_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_keys_2eproto), true);

// ===================================================================

void crypto_symmetric_key_message::InitAsDefaultInstance() {
}
class crypto_symmetric_key_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_symmetric_key_message>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_bit_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_symmetric_key_message::kKeyTypeFieldNumber;
const int crypto_symmetric_key_message::kKeyBitSizeFieldNumber;
const int crypto_symmetric_key_message::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_symmetric_key_message::crypto_symmetric_key_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_symmetric_key_message)
}
crypto_symmetric_key_message::crypto_symmetric_key_message(const crypto_symmetric_key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_type()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_bit_size_ = from.key_bit_size_;
  // @@protoc_insertion_point(copy_constructor:crypto_symmetric_key_message)
}

void crypto_symmetric_key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_symmetric_key_message_keys_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_bit_size_ = 0;
}

crypto_symmetric_key_message::~crypto_symmetric_key_message() {
  // @@protoc_insertion_point(destructor:crypto_symmetric_key_message)
  SharedDtor();
}

void crypto_symmetric_key_message::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_symmetric_key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_symmetric_key_message& crypto_symmetric_key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_symmetric_key_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_symmetric_key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_symmetric_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  key_bit_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_symmetric_key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_type(), ptr, ctx, "crypto_symmetric_key_message.key_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 key_bit_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_key_bit_size(&has_bits);
          key_bit_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_value(), ptr, ctx, "crypto_symmetric_key_message.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_symmetric_key_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_symmetric_key_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_type().data(), static_cast<int>(this->key_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_symmetric_key_message.key_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_bit_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_key_bit_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_bit_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_symmetric_key_message.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_symmetric_key_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_symmetric_key_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_symmetric_key_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_symmetric_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_symmetric_key_message.key_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_type(), output);
  }

  // optional int32 key_bit_size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->key_bit_size(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_symmetric_key_message.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_symmetric_key_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_symmetric_key_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_symmetric_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_symmetric_key_message.key_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key_type(), target);
  }

  // optional int32 key_bit_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->key_bit_size(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_symmetric_key_message.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_symmetric_key_message)
  return target;
}

size_t crypto_symmetric_key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_symmetric_key_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key_type = 1;
  if (has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 key_bit_size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->key_bit_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_symmetric_key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_symmetric_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_symmetric_key_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_symmetric_key_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_symmetric_key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_symmetric_key_message)
    MergeFrom(*source);
  }
}

void crypto_symmetric_key_message::MergeFrom(const crypto_symmetric_key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_symmetric_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      key_bit_size_ = from.key_bit_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void crypto_symmetric_key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_symmetric_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_symmetric_key_message::CopyFrom(const crypto_symmetric_key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_symmetric_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_symmetric_key_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void crypto_symmetric_key_message::Swap(crypto_symmetric_key_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_symmetric_key_message::InternalSwap(crypto_symmetric_key_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_bit_size_, other->key_bit_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_symmetric_key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_rsa_key_message::InitAsDefaultInstance() {
}
class crypto_rsa_key_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_rsa_key_message>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_bit_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_q(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_m_prime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_p_prime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_q_prime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_rsa_key_message::kKeyTypeFieldNumber;
const int crypto_rsa_key_message::kKeyBitSizeFieldNumber;
const int crypto_rsa_key_message::kModulusFieldNumber;
const int crypto_rsa_key_message::kPublicExponentFieldNumber;
const int crypto_rsa_key_message::kPrivateExponentFieldNumber;
const int crypto_rsa_key_message::kPFieldNumber;
const int crypto_rsa_key_message::kQFieldNumber;
const int crypto_rsa_key_message::kDpFieldNumber;
const int crypto_rsa_key_message::kDqFieldNumber;
const int crypto_rsa_key_message::kMPrimeFieldNumber;
const int crypto_rsa_key_message::kPPrimeFieldNumber;
const int crypto_rsa_key_message::kQPrimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_rsa_key_message::crypto_rsa_key_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_rsa_key_message)
}
crypto_rsa_key_message::crypto_rsa_key_message(const crypto_rsa_key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_type()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_modulus()) {
    modulus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  public_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_exponent()) {
    public_exponent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_exponent_);
  }
  private_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_exponent()) {
    private_exponent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_exponent_);
  }
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_p()) {
    p_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  q_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_q()) {
    q_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.q_);
  }
  dp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_dp()) {
    dp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dp_);
  }
  dq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_dq()) {
    dq_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dq_);
  }
  m_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_prime()) {
    m_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m_prime_);
  }
  p_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_p_prime()) {
    p_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_prime_);
  }
  q_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_q_prime()) {
    q_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.q_prime_);
  }
  key_bit_size_ = from.key_bit_size_;
  // @@protoc_insertion_point(copy_constructor:crypto_rsa_key_message)
}

void crypto_rsa_key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_rsa_key_message_keys_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  q_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  q_prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_bit_size_ = 0;
}

crypto_rsa_key_message::~crypto_rsa_key_message() {
  // @@protoc_insertion_point(destructor:crypto_rsa_key_message)
  SharedDtor();
}

void crypto_rsa_key_message::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  q_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_prime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_prime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  q_prime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_rsa_key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_rsa_key_message& crypto_rsa_key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_rsa_key_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_rsa_key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_rsa_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      key_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      modulus_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      public_exponent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      private_exponent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      p_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      q_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      dp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      dq_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      m_prime_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      p_prime_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      q_prime_.ClearNonDefaultToEmptyNoArena();
    }
  }
  key_bit_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_rsa_key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_type(), ptr, ctx, "crypto_rsa_key_message.key_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 key_bit_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_key_bit_size(&has_bits);
          key_bit_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string modulus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_modulus(), ptr, ctx, "crypto_rsa_key_message.modulus");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_exponent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_public_exponent(), ptr, ctx, "crypto_rsa_key_message.public_exponent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string private_exponent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_private_exponent(), ptr, ctx, "crypto_rsa_key_message.private_exponent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_p(), ptr, ctx, "crypto_rsa_key_message.p");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string q = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_q(), ptr, ctx, "crypto_rsa_key_message.q");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_dp(), ptr, ctx, "crypto_rsa_key_message.dp");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_dq(), ptr, ctx, "crypto_rsa_key_message.dq");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string m_prime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_m_prime(), ptr, ctx, "crypto_rsa_key_message.m_prime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p_prime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_p_prime(), ptr, ctx, "crypto_rsa_key_message.p_prime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string q_prime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_q_prime(), ptr, ctx, "crypto_rsa_key_message.q_prime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_rsa_key_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_rsa_key_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_type().data(), static_cast<int>(this->key_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.key_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_bit_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_key_bit_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_bit_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string modulus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_modulus()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modulus().data(), static_cast<int>(this->modulus().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.modulus");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_exponent = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_public_exponent()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_exponent().data(), static_cast<int>(this->public_exponent().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.public_exponent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string private_exponent = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_private_exponent()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_exponent().data(), static_cast<int>(this->private_exponent().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.private_exponent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string p = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_p()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->p().data(), static_cast<int>(this->p().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.p");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string q = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_q()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->q().data(), static_cast<int>(this->q().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.q");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dp()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dp().data(), static_cast<int>(this->dp().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.dp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dq = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dq()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dq().data(), static_cast<int>(this->dq().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.dq");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string m_prime = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_m_prime()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m_prime().data(), static_cast<int>(this->m_prime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.m_prime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string p_prime = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_p_prime()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->p_prime().data(), static_cast<int>(this->p_prime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.p_prime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string q_prime = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_q_prime()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->q_prime().data(), static_cast<int>(this->q_prime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_rsa_key_message.q_prime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_rsa_key_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_rsa_key_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_rsa_key_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_rsa_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.key_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_type(), output);
  }

  // optional int32 key_bit_size = 2;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->key_bit_size(), output);
  }

  // optional string modulus = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modulus().data(), static_cast<int>(this->modulus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.modulus");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->modulus(), output);
  }

  // optional string public_exponent = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_exponent().data(), static_cast<int>(this->public_exponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.public_exponent");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->public_exponent(), output);
  }

  // optional string private_exponent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_exponent().data(), static_cast<int>(this->private_exponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.private_exponent");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->private_exponent(), output);
  }

  // optional string p = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p().data(), static_cast<int>(this->p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.p");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->p(), output);
  }

  // optional string q = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), static_cast<int>(this->q().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.q");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->q(), output);
  }

  // optional string dp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dp().data(), static_cast<int>(this->dp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.dp");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dp(), output);
  }

  // optional string dq = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dq().data(), static_cast<int>(this->dq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.dq");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dq(), output);
  }

  // optional string m_prime = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_prime().data(), static_cast<int>(this->m_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.m_prime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->m_prime(), output);
  }

  // optional string p_prime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p_prime().data(), static_cast<int>(this->p_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.p_prime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->p_prime(), output);
  }

  // optional string q_prime = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q_prime().data(), static_cast<int>(this->q_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.q_prime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->q_prime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_rsa_key_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_rsa_key_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_rsa_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.key_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key_type(), target);
  }

  // optional int32 key_bit_size = 2;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->key_bit_size(), target);
  }

  // optional string modulus = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modulus().data(), static_cast<int>(this->modulus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.modulus");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->modulus(), target);
  }

  // optional string public_exponent = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_exponent().data(), static_cast<int>(this->public_exponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.public_exponent");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->public_exponent(), target);
  }

  // optional string private_exponent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_exponent().data(), static_cast<int>(this->private_exponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.private_exponent");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->private_exponent(), target);
  }

  // optional string p = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p().data(), static_cast<int>(this->p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.p");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->p(), target);
  }

  // optional string q = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), static_cast<int>(this->q().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.q");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->q(), target);
  }

  // optional string dp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dp().data(), static_cast<int>(this->dp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.dp");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->dp(), target);
  }

  // optional string dq = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dq().data(), static_cast<int>(this->dq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.dq");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->dq(), target);
  }

  // optional string m_prime = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_prime().data(), static_cast<int>(this->m_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.m_prime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->m_prime(), target);
  }

  // optional string p_prime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p_prime().data(), static_cast<int>(this->p_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.p_prime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->p_prime(), target);
  }

  // optional string q_prime = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q_prime().data(), static_cast<int>(this->q_prime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_rsa_key_message.q_prime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->q_prime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_rsa_key_message)
  return target;
}

size_t crypto_rsa_key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_rsa_key_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key_type = 1;
  if (has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string modulus = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->modulus());
    }

    // optional string public_exponent = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->public_exponent());
    }

    // optional string private_exponent = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->private_exponent());
    }

    // optional string p = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->p());
    }

    // optional string q = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->q());
    }

    // optional string dp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->dp());
    }

    // optional string dq = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->dq());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string m_prime = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->m_prime());
    }

    // optional string p_prime = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->p_prime());
    }

    // optional string q_prime = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->q_prime());
    }

    // optional int32 key_bit_size = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->key_bit_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_rsa_key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_rsa_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_rsa_key_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_rsa_key_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_rsa_key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_rsa_key_message)
    MergeFrom(*source);
  }
}

void crypto_rsa_key_message::MergeFrom(const crypto_rsa_key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_rsa_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      modulus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modulus_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      public_exponent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_exponent_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      private_exponent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_exponent_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      p_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      q_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.q_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      dp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dp_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      dq_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dq_);
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      m_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m_prime_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      p_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_prime_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      q_prime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.q_prime_);
    }
    if (cached_has_bits & 0x00000800u) {
      key_bit_size_ = from.key_bit_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void crypto_rsa_key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_rsa_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_rsa_key_message::CopyFrom(const crypto_rsa_key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_rsa_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_rsa_key_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void crypto_rsa_key_message::Swap(crypto_rsa_key_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_rsa_key_message::InternalSwap(crypto_rsa_key_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modulus_.Swap(&other->modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_exponent_.Swap(&other->public_exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  private_exponent_.Swap(&other->private_exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  p_.Swap(&other->p_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  q_.Swap(&other->q_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dp_.Swap(&other->dp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dq_.Swap(&other->dq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m_prime_.Swap(&other->m_prime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  p_prime_.Swap(&other->p_prime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  q_prime_.Swap(&other->q_prime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_bit_size_, other->key_bit_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_rsa_key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_ecc_curve_message::InitAsDefaultInstance() {
}
class crypto_ecc_curve_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_ecc_curve_message>()._has_bits_);
  static void set_has_bit_modulus_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_ecc_curve_message::kBitModulusSizeFieldNumber;
const int crypto_ecc_curve_message::kPFieldNumber;
const int crypto_ecc_curve_message::kAFieldNumber;
const int crypto_ecc_curve_message::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_ecc_curve_message::crypto_ecc_curve_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_ecc_curve_message)
}
crypto_ecc_curve_message::crypto_ecc_curve_message(const crypto_ecc_curve_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_p()) {
    p_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_a()) {
    a_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_);
  }
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_b()) {
    b_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b_);
  }
  bit_modulus_size_ = from.bit_modulus_size_;
  // @@protoc_insertion_point(copy_constructor:crypto_ecc_curve_message)
}

void crypto_ecc_curve_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_ecc_curve_message_keys_2eproto.base);
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bit_modulus_size_ = 0;
}

crypto_ecc_curve_message::~crypto_ecc_curve_message() {
  // @@protoc_insertion_point(destructor:crypto_ecc_curve_message)
  SharedDtor();
}

void crypto_ecc_curve_message::SharedDtor() {
  p_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_ecc_curve_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_ecc_curve_message& crypto_ecc_curve_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_ecc_curve_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_ecc_curve_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_ecc_curve_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      p_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      a_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      b_.ClearNonDefaultToEmptyNoArena();
    }
  }
  bit_modulus_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_ecc_curve_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 bit_modulus_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bit_modulus_size(&has_bits);
          bit_modulus_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_p(), ptr, ctx, "crypto_ecc_curve_message.p");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_a(), ptr, ctx, "crypto_ecc_curve_message.a");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_b(), ptr, ctx, "crypto_ecc_curve_message.b");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_ecc_curve_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_ecc_curve_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bit_modulus_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bit_modulus_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_modulus_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string p = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_p()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->p().data(), static_cast<int>(this->p().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_curve_message.p");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string a = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_a()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a().data(), static_cast<int>(this->a().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_curve_message.a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string b = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_b()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->b().data(), static_cast<int>(this->b().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_curve_message.b");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_ecc_curve_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_ecc_curve_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_ecc_curve_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_ecc_curve_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bit_modulus_size = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->bit_modulus_size(), output);
  }

  // optional string p = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p().data(), static_cast<int>(this->p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.p");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->p(), output);
  }

  // optional string a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a().data(), static_cast<int>(this->a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.a");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->a(), output);
  }

  // optional string b = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b().data(), static_cast<int>(this->b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.b");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_ecc_curve_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_ecc_curve_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_ecc_curve_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bit_modulus_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->bit_modulus_size(), target);
  }

  // optional string p = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->p().data(), static_cast<int>(this->p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.p");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->p(), target);
  }

  // optional string a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a().data(), static_cast<int>(this->a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.a");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->a(), target);
  }

  // optional string b = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b().data(), static_cast<int>(this->b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_curve_message.b");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_ecc_curve_message)
  return target;
}

size_t crypto_ecc_curve_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_ecc_curve_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 bit_modulus_size = 1;
  if (has_bit_modulus_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bit_modulus_size());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string p = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->p());
    }

    // optional string a = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->a());
    }

    // optional string b = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->b());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_ecc_curve_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_ecc_curve_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_ecc_curve_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_ecc_curve_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_ecc_curve_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_ecc_curve_message)
    MergeFrom(*source);
  }
}

void crypto_ecc_curve_message::MergeFrom(const crypto_ecc_curve_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_ecc_curve_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      p_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      a_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      b_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b_);
    }
    if (cached_has_bits & 0x00000008u) {
      bit_modulus_size_ = from.bit_modulus_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void crypto_ecc_curve_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_ecc_curve_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_ecc_curve_message::CopyFrom(const crypto_ecc_curve_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_ecc_curve_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_ecc_curve_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void crypto_ecc_curve_message::Swap(crypto_ecc_curve_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_ecc_curve_message::InternalSwap(crypto_ecc_curve_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  p_.Swap(&other->p_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_.Swap(&other->a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bit_modulus_size_, other->bit_modulus_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_ecc_curve_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_point_message::InitAsDefaultInstance() {
}
class crypto_point_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_point_message>()._has_bits_);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_point_message::kValidFieldNumber;
const int crypto_point_message::kXFieldNumber;
const int crypto_point_message::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_point_message::crypto_point_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_point_message)
}
crypto_point_message::crypto_point_message(const crypto_point_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_x()) {
    x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_y()) {
    y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:crypto_point_message)
}

void crypto_point_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_point_message_keys_2eproto.base);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valid_ = 0;
}

crypto_point_message::~crypto_point_message() {
  // @@protoc_insertion_point(destructor:crypto_point_message)
  SharedDtor();
}

void crypto_point_message::SharedDtor() {
  x_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_point_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_point_message& crypto_point_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_point_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_point_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  valid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_point_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_x(), ptr, ctx, "crypto_point_message.x");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_y(), ptr, ctx, "crypto_point_message.y");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_point_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_point_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->x().data(), static_cast<int>(this->x().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_point_message.x");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->y().data(), static_cast<int>(this->y().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_point_message.y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_point_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_point_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_point_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 valid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->valid(), output);
  }

  // optional string x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->x().data(), static_cast<int>(this->x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_point_message.x");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->x(), output);
  }

  // optional string y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->y().data(), static_cast<int>(this->y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_point_message.y");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_point_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_point_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 valid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->valid(), target);
  }

  // optional string x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->x().data(), static_cast<int>(this->x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_point_message.x");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->x(), target);
  }

  // optional string y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->y().data(), static_cast<int>(this->y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_point_message.y");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_point_message)
  return target;
}

size_t crypto_point_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_point_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 valid = 1;
  if (has_valid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->valid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->x());
    }

    // optional string y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->y());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_point_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_point_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_point_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_point_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_point_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_point_message)
    MergeFrom(*source);
  }
}

void crypto_point_message::MergeFrom(const crypto_point_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_point_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
    }
    if (cached_has_bits & 0x00000004u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void crypto_point_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_point_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_point_message::CopyFrom(const crypto_point_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_point_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_point_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void crypto_point_message::Swap(crypto_point_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_point_message::InternalSwap(crypto_point_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.Swap(&other->x_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_.Swap(&other->y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_point_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_ecc_key_message::InitAsDefaultInstance() {
  ::_crypto_ecc_key_message_default_instance_._instance.get_mutable()->curve_ = const_cast< ::crypto_ecc_curve_message*>(
      ::crypto_ecc_curve_message::internal_default_instance());
  ::_crypto_ecc_key_message_default_instance_._instance.get_mutable()->base_point_ = const_cast< ::crypto_point_message*>(
      ::crypto_point_message::internal_default_instance());
  ::_crypto_ecc_key_message_default_instance_._instance.get_mutable()->generator_ = const_cast< ::crypto_point_message*>(
      ::crypto_point_message::internal_default_instance());
}
class crypto_ecc_key_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_ecc_key_message>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::crypto_ecc_curve_message& curve(const crypto_ecc_key_message* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::crypto_point_message& base_point(const crypto_ecc_key_message* msg);
  static void set_has_base_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::crypto_point_message& generator(const crypto_ecc_key_message* msg);
  static void set_has_generator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_private_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::crypto_ecc_curve_message&
crypto_ecc_key_message::HasBitSetters::curve(const crypto_ecc_key_message* msg) {
  return *msg->curve_;
}
const ::crypto_point_message&
crypto_ecc_key_message::HasBitSetters::base_point(const crypto_ecc_key_message* msg) {
  return *msg->base_point_;
}
const ::crypto_point_message&
crypto_ecc_key_message::HasBitSetters::generator(const crypto_ecc_key_message* msg) {
  return *msg->generator_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_ecc_key_message::kKeyTypeFieldNumber;
const int crypto_ecc_key_message::kCurveFieldNumber;
const int crypto_ecc_key_message::kBasePointFieldNumber;
const int crypto_ecc_key_message::kGeneratorFieldNumber;
const int crypto_ecc_key_message::kPrivateNonceFieldNumber;
const int crypto_ecc_key_message::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_ecc_key_message::crypto_ecc_key_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_ecc_key_message)
}
crypto_ecc_key_message::crypto_ecc_key_message(const crypto_ecc_key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_type()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  private_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_nonce()) {
    private_nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_nonce_);
  }
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_order()) {
    order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_);
  }
  if (from.has_curve()) {
    curve_ = new ::crypto_ecc_curve_message(*from.curve_);
  } else {
    curve_ = nullptr;
  }
  if (from.has_base_point()) {
    base_point_ = new ::crypto_point_message(*from.base_point_);
  } else {
    base_point_ = nullptr;
  }
  if (from.has_generator()) {
    generator_ = new ::crypto_point_message(*from.generator_);
  } else {
    generator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crypto_ecc_key_message)
}

void crypto_ecc_key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_ecc_key_message_keys_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generator_) -
      reinterpret_cast<char*>(&curve_)) + sizeof(generator_));
}

crypto_ecc_key_message::~crypto_ecc_key_message() {
  // @@protoc_insertion_point(destructor:crypto_ecc_key_message)
  SharedDtor();
}

void crypto_ecc_key_message::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete curve_;
  if (this != internal_default_instance()) delete base_point_;
  if (this != internal_default_instance()) delete generator_;
}

void crypto_ecc_key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_ecc_key_message& crypto_ecc_key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_ecc_key_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_ecc_key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_ecc_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      key_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      private_nonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(curve_ != nullptr);
      curve_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(base_point_ != nullptr);
      base_point_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(generator_ != nullptr);
      generator_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_ecc_key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_type(), ptr, ctx, "crypto_ecc_key_message.key_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_ecc_curve_message curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_point_message base_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_point_message generator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string private_nonce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_private_nonce(), ptr, ctx, "crypto_ecc_key_message.private_nonce");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_order(), ptr, ctx, "crypto_ecc_key_message.order");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_ecc_key_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_ecc_key_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_type().data(), static_cast<int>(this->key_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_key_message.key_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_ecc_curve_message curve = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_point_message base_point = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_point_message generator = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string private_nonce = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_private_nonce()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_nonce().data(), static_cast<int>(this->private_nonce().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_key_message.private_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_order()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order().data(), static_cast<int>(this->order().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_ecc_key_message.order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_ecc_key_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_ecc_key_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_ecc_key_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_ecc_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.key_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_type(), output);
  }

  // optional .crypto_ecc_curve_message curve = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::curve(this), output);
  }

  // optional .crypto_point_message base_point = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::base_point(this), output);
  }

  // optional .crypto_point_message generator = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::generator(this), output);
  }

  // optional string private_nonce = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_nonce().data(), static_cast<int>(this->private_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.private_nonce");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->private_nonce(), output);
  }

  // optional string order = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order().data(), static_cast<int>(this->order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.order");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_ecc_key_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_ecc_key_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_ecc_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.key_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key_type(), target);
  }

  // optional .crypto_ecc_curve_message curve = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::curve(this), target);
  }

  // optional .crypto_point_message base_point = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::base_point(this), target);
  }

  // optional .crypto_point_message generator = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::generator(this), target);
  }

  // optional string private_nonce = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_nonce().data(), static_cast<int>(this->private_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.private_nonce");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->private_nonce(), target);
  }

  // optional string order = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order().data(), static_cast<int>(this->order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_ecc_key_message.order");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->order(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_ecc_key_message)
  return target;
}

size_t crypto_ecc_key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_ecc_key_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key_type = 1;
  if (has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string private_nonce = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->private_nonce());
    }

    // optional string order = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->order());
    }

    // optional .crypto_ecc_curve_message curve = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional .crypto_point_message base_point = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_point_);
    }

    // optional .crypto_point_message generator = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_ecc_key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_ecc_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_ecc_key_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_ecc_key_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_ecc_key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_ecc_key_message)
    MergeFrom(*source);
  }
}

void crypto_ecc_key_message::MergeFrom(const crypto_ecc_key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_ecc_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      private_nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_nonce_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_curve()->::crypto_ecc_curve_message::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_base_point()->::crypto_point_message::MergeFrom(from.base_point());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_generator()->::crypto_point_message::MergeFrom(from.generator());
    }
  }
}

void crypto_ecc_key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_ecc_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_ecc_key_message::CopyFrom(const crypto_ecc_key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_ecc_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_ecc_key_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_curve()) {
    if (!this->curve_->IsInitialized()) return false;
  }
  if (has_base_point()) {
    if (!this->base_point_->IsInitialized()) return false;
  }
  if (has_generator()) {
    if (!this->generator_->IsInitialized()) return false;
  }
  return true;
}

void crypto_ecc_key_message::Swap(crypto_ecc_key_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_ecc_key_message::InternalSwap(crypto_ecc_key_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  private_nonce_.Swap(&other->private_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_.Swap(&other->order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curve_, other->curve_);
  swap(base_point_, other->base_point_);
  swap(generator_, other->generator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_ecc_key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_key_message::InitAsDefaultInstance() {
  ::_crypto_key_message_default_instance_._instance.get_mutable()->symkey_ = const_cast< ::crypto_symmetric_key_message*>(
      ::crypto_symmetric_key_message::internal_default_instance());
  ::_crypto_key_message_default_instance_._instance.get_mutable()->rsakey_ = const_cast< ::crypto_rsa_key_message*>(
      ::crypto_rsa_key_message::internal_default_instance());
  ::_crypto_key_message_default_instance_._instance.get_mutable()->ecckey_ = const_cast< ::crypto_ecc_key_message*>(
      ::crypto_ecc_key_message::internal_default_instance());
}
class crypto_key_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_key_message>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_not_before(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_not_after(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::crypto_symmetric_key_message& symkey(const crypto_key_message* msg);
  static void set_has_symkey(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::crypto_rsa_key_message& rsakey(const crypto_key_message* msg);
  static void set_has_rsakey(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::crypto_ecc_key_message& ecckey(const crypto_key_message* msg);
  static void set_has_ecckey(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_crypto_context(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::crypto_symmetric_key_message&
crypto_key_message::HasBitSetters::symkey(const crypto_key_message* msg) {
  return *msg->symkey_;
}
const ::crypto_rsa_key_message&
crypto_key_message::HasBitSetters::rsakey(const crypto_key_message* msg) {
  return *msg->rsakey_;
}
const ::crypto_ecc_key_message&
crypto_key_message::HasBitSetters::ecckey(const crypto_key_message* msg) {
  return *msg->ecckey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_key_message::kKeyTypeFieldNumber;
const int crypto_key_message::kKeyNameFieldNumber;
const int crypto_key_message::kKeyUsageFieldNumber;
const int crypto_key_message::kKeyOwnerFieldNumber;
const int crypto_key_message::kNotBeforeFieldNumber;
const int crypto_key_message::kNotAfterFieldNumber;
const int crypto_key_message::kSymkeyFieldNumber;
const int crypto_key_message::kRsakeyFieldNumber;
const int crypto_key_message::kEcckeyFieldNumber;
const int crypto_key_message::kCryptoContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_key_message::crypto_key_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_key_message)
}
crypto_key_message::crypto_key_message(const crypto_key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_type()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_name()) {
    key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
  key_usage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_usage()) {
    key_usage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_usage_);
  }
  key_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_owner()) {
    key_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_owner_);
  }
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_not_before()) {
    not_before_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.not_before_);
  }
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_not_after()) {
    not_after_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.not_after_);
  }
  crypto_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_crypto_context()) {
    crypto_context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crypto_context_);
  }
  if (from.has_symkey()) {
    symkey_ = new ::crypto_symmetric_key_message(*from.symkey_);
  } else {
    symkey_ = nullptr;
  }
  if (from.has_rsakey()) {
    rsakey_ = new ::crypto_rsa_key_message(*from.rsakey_);
  } else {
    rsakey_ = nullptr;
  }
  if (from.has_ecckey()) {
    ecckey_ = new ::crypto_ecc_key_message(*from.ecckey_);
  } else {
    ecckey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crypto_key_message)
}

void crypto_key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_key_message_keys_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_usage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crypto_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecckey_) -
      reinterpret_cast<char*>(&symkey_)) + sizeof(ecckey_));
}

crypto_key_message::~crypto_key_message() {
  // @@protoc_insertion_point(destructor:crypto_key_message)
  SharedDtor();
}

void crypto_key_message::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_usage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crypto_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symkey_;
  if (this != internal_default_instance()) delete rsakey_;
  if (this != internal_default_instance()) delete ecckey_;
}

void crypto_key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_key_message& crypto_key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_key_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      key_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      key_usage_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      key_owner_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      not_before_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      not_after_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      crypto_context_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(symkey_ != nullptr);
      symkey_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rsakey_ != nullptr);
      rsakey_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ecckey_ != nullptr);
      ecckey_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_type(), ptr, ctx, "crypto_key_message.key_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_name(), ptr, ctx, "crypto_key_message.key_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_usage(), ptr, ctx, "crypto_key_message.key_usage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_key_owner(), ptr, ctx, "crypto_key_message.key_owner");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string not_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_not_before(), ptr, ctx, "crypto_key_message.not_before");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string not_after = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_not_after(), ptr, ctx, "crypto_key_message.not_after");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_symmetric_key_message symkey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_symkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_rsa_key_message rsakey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_rsakey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_ecc_key_message ecckey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ecckey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string crypto_context = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_crypto_context(), ptr, ctx, "crypto_key_message.crypto_context");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_key_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_key_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_type().data(), static_cast<int>(this->key_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.key_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_name().data(), static_cast<int>(this->key_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.key_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key_usage = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_usage()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_usage().data(), static_cast<int>(this->key_usage().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.key_usage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key_owner = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_owner()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_owner().data(), static_cast<int>(this->key_owner().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.key_owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string not_before = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_not_before()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_before().data(), static_cast<int>(this->not_before().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.not_before");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string not_after = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_not_after()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_after().data(), static_cast<int>(this->not_after().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.not_after");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_symmetric_key_message symkey = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_rsa_key_message rsakey = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rsakey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_ecc_key_message ecckey = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ecckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string crypto_context = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crypto_context()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crypto_context().data(), static_cast<int>(this->crypto_context().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_key_message.crypto_context");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_key_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_key_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_key_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_type(), output);
  }

  // optional string key_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key_name(), output);
  }

  // optional string key_usage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_usage().data(), static_cast<int>(this->key_usage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_usage");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key_usage(), output);
  }

  // optional string key_owner = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_owner().data(), static_cast<int>(this->key_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_owner");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key_owner(), output);
  }

  // optional string not_before = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_before().data(), static_cast<int>(this->not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.not_before");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->not_before(), output);
  }

  // optional string not_after = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_after().data(), static_cast<int>(this->not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.not_after");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->not_after(), output);
  }

  // optional .crypto_symmetric_key_message symkey = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::symkey(this), output);
  }

  // optional .crypto_rsa_key_message rsakey = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::rsakey(this), output);
  }

  // optional .crypto_ecc_key_message ecckey = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::ecckey(this), output);
  }

  // optional string crypto_context = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crypto_context().data(), static_cast<int>(this->crypto_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.crypto_context");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->crypto_context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_key_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_key_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_type().data(), static_cast<int>(this->key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key_type(), target);
  }

  // optional string key_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->key_name(), target);
  }

  // optional string key_usage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_usage().data(), static_cast<int>(this->key_usage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_usage");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->key_usage(), target);
  }

  // optional string key_owner = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_owner().data(), static_cast<int>(this->key_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.key_owner");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->key_owner(), target);
  }

  // optional string not_before = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_before().data(), static_cast<int>(this->not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.not_before");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->not_before(), target);
  }

  // optional string not_after = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_after().data(), static_cast<int>(this->not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.not_after");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->not_after(), target);
  }

  // optional .crypto_symmetric_key_message symkey = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::symkey(this), target);
  }

  // optional .crypto_rsa_key_message rsakey = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::rsakey(this), target);
  }

  // optional .crypto_ecc_key_message ecckey = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::ecckey(this), target);
  }

  // optional string crypto_context = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crypto_context().data(), static_cast<int>(this->crypto_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_key_message.crypto_context");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->crypto_context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_key_message)
  return target;
}

size_t crypto_key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_key_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key_type = 1;
  if (has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string key_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key_name());
    }

    // optional string key_usage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key_usage());
    }

    // optional string key_owner = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key_owner());
    }

    // optional string not_before = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->not_before());
    }

    // optional string not_after = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->not_after());
    }

    // optional string crypto_context = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->crypto_context());
    }

    // optional .crypto_symmetric_key_message symkey = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *symkey_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .crypto_rsa_key_message rsakey = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsakey_);
    }

    // optional .crypto_ecc_key_message ecckey = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ecckey_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_key_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_key_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_key_message)
    MergeFrom(*source);
  }
}

void crypto_key_message::MergeFrom(const crypto_key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      key_usage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_usage_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      key_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_owner_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      not_before_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.not_before_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      not_after_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.not_after_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      crypto_context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crypto_context_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_symkey()->::crypto_symmetric_key_message::MergeFrom(from.symkey());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_rsakey()->::crypto_rsa_key_message::MergeFrom(from.rsakey());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_ecckey()->::crypto_ecc_key_message::MergeFrom(from.ecckey());
    }
  }
}

void crypto_key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_key_message::CopyFrom(const crypto_key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_key_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_symkey()) {
    if (!this->symkey_->IsInitialized()) return false;
  }
  if (has_rsakey()) {
    if (!this->rsakey_->IsInitialized()) return false;
  }
  if (has_ecckey()) {
    if (!this->ecckey_->IsInitialized()) return false;
  }
  return true;
}

void crypto_key_message::Swap(crypto_key_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_key_message::InternalSwap(crypto_key_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_usage_.Swap(&other->key_usage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_owner_.Swap(&other->key_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  not_before_.Swap(&other->not_before_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  not_after_.Swap(&other->not_after_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crypto_context_.Swap(&other->crypto_context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symkey_, other->symkey_);
  swap(rsakey_, other->rsakey_);
  swap(ecckey_, other->ecckey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_encryption_algorithm_message::InitAsDefaultInstance() {
  ::_crypto_encryption_algorithm_message_default_instance_._instance.get_mutable()->key_msg_ = const_cast< ::crypto_symmetric_key_message*>(
      ::crypto_symmetric_key_message::internal_default_instance());
}
class crypto_encryption_algorithm_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_encryption_algorithm_message>()._has_bits_);
  static void set_has_encryption_algorithm_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::crypto_symmetric_key_message& key_msg(const crypto_encryption_algorithm_message* msg);
  static void set_has_key_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encryption_algorithm_hmac_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_encryption_algorithm_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encryption_algorithm_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encryption_algorithm_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::crypto_symmetric_key_message&
crypto_encryption_algorithm_message::HasBitSetters::key_msg(const crypto_encryption_algorithm_message* msg) {
  return *msg->key_msg_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_encryption_algorithm_message::kEncryptionAlgorithmNameFieldNumber;
const int crypto_encryption_algorithm_message::kMessageIdFieldNumber;
const int crypto_encryption_algorithm_message::kKeyMsgFieldNumber;
const int crypto_encryption_algorithm_message::kEncryptionAlgorithmHmacKeyFieldNumber;
const int crypto_encryption_algorithm_message::kEncryptionAlgorithmIvFieldNumber;
const int crypto_encryption_algorithm_message::kEncryptionAlgorithmModeFieldNumber;
const int crypto_encryption_algorithm_message::kEncryptionAlgorithmPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_encryption_algorithm_message::crypto_encryption_algorithm_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_encryption_algorithm_message)
}
crypto_encryption_algorithm_message::crypto_encryption_algorithm_message(const crypto_encryption_algorithm_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_name()) {
    encryption_algorithm_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_name_);
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_id()) {
    message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  encryption_algorithm_hmac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_hmac_key()) {
    encryption_algorithm_hmac_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_hmac_key_);
  }
  encryption_algorithm_iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_iv()) {
    encryption_algorithm_iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_iv_);
  }
  encryption_algorithm_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_mode()) {
    encryption_algorithm_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_mode_);
  }
  encryption_algorithm_pad_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_pad()) {
    encryption_algorithm_pad_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_pad_);
  }
  if (from.has_key_msg()) {
    key_msg_ = new ::crypto_symmetric_key_message(*from.key_msg_);
  } else {
    key_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crypto_encryption_algorithm_message)
}

void crypto_encryption_algorithm_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_encryption_algorithm_message_keys_2eproto.base);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_hmac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_pad_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_msg_ = nullptr;
}

crypto_encryption_algorithm_message::~crypto_encryption_algorithm_message() {
  // @@protoc_insertion_point(destructor:crypto_encryption_algorithm_message)
  SharedDtor();
}

void crypto_encryption_algorithm_message::SharedDtor() {
  encryption_algorithm_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_hmac_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_algorithm_pad_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_msg_;
}

void crypto_encryption_algorithm_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_encryption_algorithm_message& crypto_encryption_algorithm_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_encryption_algorithm_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_encryption_algorithm_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_encryption_algorithm_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      encryption_algorithm_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      encryption_algorithm_hmac_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      encryption_algorithm_iv_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      encryption_algorithm_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      encryption_algorithm_pad_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(key_msg_ != nullptr);
      key_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_encryption_algorithm_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string encryption_algorithm_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_name(), ptr, ctx, "crypto_encryption_algorithm_message.encryption_algorithm_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message_id(), ptr, ctx, "crypto_encryption_algorithm_message.message_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .crypto_symmetric_key_message key_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_key_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encryption_algorithm_hmac_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_hmac_key(), ptr, ctx, "crypto_encryption_algorithm_message.encryption_algorithm_hmac_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encryption_algorithm_iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_iv(), ptr, ctx, "crypto_encryption_algorithm_message.encryption_algorithm_iv");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encryption_algorithm_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_mode(), ptr, ctx, "crypto_encryption_algorithm_message.encryption_algorithm_mode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encryption_algorithm_pad = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_pad(), ptr, ctx, "crypto_encryption_algorithm_message.encryption_algorithm_pad");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_encryption_algorithm_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_encryption_algorithm_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string encryption_algorithm_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.encryption_algorithm_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.message_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .crypto_symmetric_key_message key_msg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encryption_algorithm_hmac_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_hmac_key()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_hmac_key().data(), static_cast<int>(this->encryption_algorithm_hmac_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.encryption_algorithm_hmac_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encryption_algorithm_iv = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_iv()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_iv().data(), static_cast<int>(this->encryption_algorithm_iv().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.encryption_algorithm_iv");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encryption_algorithm_mode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_mode()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_mode().data(), static_cast<int>(this->encryption_algorithm_mode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.encryption_algorithm_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encryption_algorithm_pad = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_pad()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_pad().data(), static_cast<int>(this->encryption_algorithm_pad().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_encryption_algorithm_message.encryption_algorithm_pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_encryption_algorithm_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_encryption_algorithm_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_encryption_algorithm_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_encryption_algorithm_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string encryption_algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->encryption_algorithm_name(), output);
  }

  // optional string message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.message_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_id(), output);
  }

  // optional .crypto_symmetric_key_message key_msg = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::key_msg(this), output);
  }

  // optional string encryption_algorithm_hmac_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_hmac_key().data(), static_cast<int>(this->encryption_algorithm_hmac_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_hmac_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->encryption_algorithm_hmac_key(), output);
  }

  // optional string encryption_algorithm_iv = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_iv().data(), static_cast<int>(this->encryption_algorithm_iv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_iv");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encryption_algorithm_iv(), output);
  }

  // optional string encryption_algorithm_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_mode().data(), static_cast<int>(this->encryption_algorithm_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_mode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encryption_algorithm_mode(), output);
  }

  // optional string encryption_algorithm_pad = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_pad().data(), static_cast<int>(this->encryption_algorithm_pad().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_pad");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->encryption_algorithm_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_encryption_algorithm_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_encryption_algorithm_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_encryption_algorithm_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string encryption_algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->encryption_algorithm_name(), target);
  }

  // optional string message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.message_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message_id(), target);
  }

  // optional .crypto_symmetric_key_message key_msg = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::key_msg(this), target);
  }

  // optional string encryption_algorithm_hmac_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_hmac_key().data(), static_cast<int>(this->encryption_algorithm_hmac_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_hmac_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->encryption_algorithm_hmac_key(), target);
  }

  // optional string encryption_algorithm_iv = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_iv().data(), static_cast<int>(this->encryption_algorithm_iv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_iv");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->encryption_algorithm_iv(), target);
  }

  // optional string encryption_algorithm_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_mode().data(), static_cast<int>(this->encryption_algorithm_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_mode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->encryption_algorithm_mode(), target);
  }

  // optional string encryption_algorithm_pad = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_pad().data(), static_cast<int>(this->encryption_algorithm_pad().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_encryption_algorithm_message.encryption_algorithm_pad");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->encryption_algorithm_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_encryption_algorithm_message)
  return target;
}

size_t crypto_encryption_algorithm_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_encryption_algorithm_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string encryption_algorithm_name = 1;
  if (has_encryption_algorithm_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->encryption_algorithm_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional string message_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->message_id());
    }

    // optional string encryption_algorithm_hmac_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->encryption_algorithm_hmac_key());
    }

    // optional string encryption_algorithm_iv = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->encryption_algorithm_iv());
    }

    // optional string encryption_algorithm_mode = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->encryption_algorithm_mode());
    }

    // optional string encryption_algorithm_pad = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->encryption_algorithm_pad());
    }

    // optional .crypto_symmetric_key_message key_msg = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_msg_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_encryption_algorithm_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_encryption_algorithm_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_encryption_algorithm_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_encryption_algorithm_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_encryption_algorithm_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_encryption_algorithm_message)
    MergeFrom(*source);
  }
}

void crypto_encryption_algorithm_message::MergeFrom(const crypto_encryption_algorithm_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_encryption_algorithm_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encryption_algorithm_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      encryption_algorithm_hmac_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_hmac_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      encryption_algorithm_iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_iv_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      encryption_algorithm_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_mode_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      encryption_algorithm_pad_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_pad_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_key_msg()->::crypto_symmetric_key_message::MergeFrom(from.key_msg());
    }
  }
}

void crypto_encryption_algorithm_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_encryption_algorithm_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_encryption_algorithm_message::CopyFrom(const crypto_encryption_algorithm_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_encryption_algorithm_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_encryption_algorithm_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_key_msg()) {
    if (!this->key_msg_->IsInitialized()) return false;
  }
  return true;
}

void crypto_encryption_algorithm_message::Swap(crypto_encryption_algorithm_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_encryption_algorithm_message::InternalSwap(crypto_encryption_algorithm_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_algorithm_name_.Swap(&other->encryption_algorithm_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_algorithm_hmac_key_.Swap(&other->encryption_algorithm_hmac_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_algorithm_iv_.Swap(&other->encryption_algorithm_iv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_algorithm_mode_.Swap(&other->encryption_algorithm_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_algorithm_pad_.Swap(&other->encryption_algorithm_pad_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_msg_, other->key_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_encryption_algorithm_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_key_store_message::InitAsDefaultInstance() {
}
class crypto_key_store_message::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_key_store_message>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_key_store_message::kKeyEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_key_store_message::crypto_key_store_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_key_store_message)
}
crypto_key_store_message::crypto_key_store_message(const crypto_key_store_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_entry_(from.key_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:crypto_key_store_message)
}

void crypto_key_store_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_key_store_message_keys_2eproto.base);
}

crypto_key_store_message::~crypto_key_store_message() {
  // @@protoc_insertion_point(destructor:crypto_key_store_message)
  SharedDtor();
}

void crypto_key_store_message::SharedDtor() {
}

void crypto_key_store_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_key_store_message& crypto_key_store_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_key_store_message_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_key_store_message::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_key_store_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_key_store_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .crypto_key_message key_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_key_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_key_store_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_key_store_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .crypto_key_message key_entry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_key_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_key_store_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_key_store_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_key_store_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_key_store_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .crypto_key_message key_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->key_entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_key_store_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_key_store_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_key_store_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .crypto_key_message key_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->key_entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_key_store_message)
  return target;
}

size_t crypto_key_store_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_key_store_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .crypto_key_message key_entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->key_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->key_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_key_store_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_key_store_message)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_key_store_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_key_store_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_key_store_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_key_store_message)
    MergeFrom(*source);
  }
}

void crypto_key_store_message::MergeFrom(const crypto_key_store_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_key_store_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_entry_.MergeFrom(from.key_entry_);
}

void crypto_key_store_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_key_store_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_key_store_message::CopyFrom(const crypto_key_store_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_key_store_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_key_store_message::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->key_entry())) return false;
  return true;
}

void crypto_key_store_message::Swap(crypto_key_store_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_key_store_message::InternalSwap(crypto_key_store_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&key_entry_)->InternalSwap(CastToBase(&other->key_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_key_store_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_signature::InitAsDefaultInstance() {
}
class crypto_signature::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<crypto_signature>()._has_bits_);
  static void set_has_encryption_algorithm_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_statement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int crypto_signature::kEncryptionAlgorithmNameFieldNumber;
const int crypto_signature::kSerializedStatementFieldNumber;
const int crypto_signature::kSignatureFieldNumber;
const int crypto_signature::kSignerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

crypto_signature::crypto_signature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto_signature)
}
crypto_signature::crypto_signature(const crypto_signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_algorithm_name()) {
    encryption_algorithm_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_name_);
  }
  serialized_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_statement()) {
    serialized_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_statement_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  signer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_signer_name()) {
    signer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_name_);
  }
  // @@protoc_insertion_point(copy_constructor:crypto_signature)
}

void crypto_signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_signature_keys_2eproto.base);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

crypto_signature::~crypto_signature() {
  // @@protoc_insertion_point(destructor:crypto_signature)
  SharedDtor();
}

void crypto_signature::SharedDtor() {
  encryption_algorithm_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_signature& crypto_signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_signature_keys_2eproto.base);
  return *internal_default_instance();
}


void crypto_signature::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      encryption_algorithm_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_statement_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      signer_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* crypto_signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string encryption_algorithm_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_encryption_algorithm_name(), ptr, ctx, "crypto_signature.encryption_algorithm_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string serialized_statement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_serialized_statement(), ptr, ctx, "crypto_signature.serialized_statement");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_signature(), ptr, ctx, "crypto_signature.signature");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_signer_name(), ptr, ctx, "crypto_signature.signer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool crypto_signature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto_signature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string encryption_algorithm_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_signature.encryption_algorithm_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string serialized_statement = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_statement()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serialized_statement().data(), static_cast<int>(this->serialized_statement().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_signature.serialized_statement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string signature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_signature.signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string signer_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_signer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signer_name().data(), static_cast<int>(this->signer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "crypto_signature.signer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto_signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto_signature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void crypto_signature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto_signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string encryption_algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.encryption_algorithm_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->encryption_algorithm_name(), output);
  }

  // required string serialized_statement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_statement().data(), static_cast<int>(this->serialized_statement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.serialized_statement");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serialized_statement(), output);
  }

  // optional string signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signature");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signature(), output);
  }

  // optional string signer_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signer_name().data(), static_cast<int>(this->signer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signer_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:crypto_signature)
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_signature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string encryption_algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryption_algorithm_name().data(), static_cast<int>(this->encryption_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.encryption_algorithm_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->encryption_algorithm_name(), target);
  }

  // required string serialized_statement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_statement().data(), static_cast<int>(this->serialized_statement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.serialized_statement");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->serialized_statement(), target);
  }

  // optional string signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signature");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->signature(), target);
  }

  // optional string signer_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signer_name().data(), static_cast<int>(this->signer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->signer_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_signature)
  return target;
}

size_t crypto_signature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:crypto_signature)
  size_t total_size = 0;

  if (has_encryption_algorithm_name()) {
    // required string encryption_algorithm_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->encryption_algorithm_name());
  }

  if (has_serialized_statement()) {
    // required string serialized_statement = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->serialized_statement());
  }

  return total_size;
}
size_t crypto_signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_signature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string encryption_algorithm_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->encryption_algorithm_name());

    // required string serialized_statement = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->serialized_statement());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string signature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string signer_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->signer_name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_signature)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_signature)
    MergeFrom(*source);
  }
}

void crypto_signature::MergeFrom(const crypto_signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encryption_algorithm_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_statement_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_statement_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      signer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_name_);
    }
  }
}

void crypto_signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_signature::CopyFrom(const crypto_signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_signature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void crypto_signature::Swap(crypto_signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void crypto_signature::InternalSwap(crypto_signature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_algorithm_name_.Swap(&other->encryption_algorithm_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_statement_.Swap(&other->serialized_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signer_name_.Swap(&other->signer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_signature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::crypto_symmetric_key_message* Arena::CreateMaybeMessage< ::crypto_symmetric_key_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_symmetric_key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_rsa_key_message* Arena::CreateMaybeMessage< ::crypto_rsa_key_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_rsa_key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_ecc_curve_message* Arena::CreateMaybeMessage< ::crypto_ecc_curve_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_ecc_curve_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_point_message* Arena::CreateMaybeMessage< ::crypto_point_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_point_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_ecc_key_message* Arena::CreateMaybeMessage< ::crypto_ecc_key_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_ecc_key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_key_message* Arena::CreateMaybeMessage< ::crypto_key_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_encryption_algorithm_message* Arena::CreateMaybeMessage< ::crypto_encryption_algorithm_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_encryption_algorithm_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_key_store_message* Arena::CreateMaybeMessage< ::crypto_key_store_message >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_key_store_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_signature* Arena::CreateMaybeMessage< ::crypto_signature >(Arena* arena) {
  return Arena::CreateInternal< ::crypto_signature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
