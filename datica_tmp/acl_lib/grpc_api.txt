grpc API for acl_lib

now:

bool rpc_authenticate_me(const string& principal_name, string* output)
  input: name (string)  Note: verification algorithm determines crypt algorithm
  output: status (bool), nonce(bytes)
bool rpc_verify_me(const string& principal_name, const string& signed_nonce)
  input: name-of-principal (string), signed_nonce (bytes)
  output: status (bool)
bool rpc_open_resource(const string& resource_name, const string& access_right)
  input: resource-name (string), access-right (string)
  output: status (bool)
bool rpc_read_resource(const string& resource_name, int num_bytes, string* bytes_read)
  input: resource-name (string), num-bytes (int32)
  output: status (bool), output (bytes)
bool rpc_write_resource(const string& resource_name, const string& bytes_to_write)
  input: resource-name (string), num-bytes (int32), buffer (bytes)
  output: status (bool)
bool rpc_close_resource(const string& resource_name)
  input: resource-name (string)
  output: status
bool rpc_add_access_right(const string& resource_name, const string& delegated_principal,
                          const string& right)

later:
rpc_create_resource
rpc_delete_resource
rpc_add_principal


  bool authenticate_me(const string& name, principal_list& pl, string* nonce);
  bool verify_me(const string& name, const string& signed_nonce);
  bool add_access_rights(string& resource_name, string& right, string& new_prin);
  bool create_resource(string& name);
  bool open_resource(const string& resource_name, const string& access_mode);
  bool read_resource(const string& resource_name, int n, string* out);
  bool write_resource(const string& resource_name, int n, string& in);
  bool delete_resource(const string& resource_name);
  bool close_resource(const string& resource_name);

